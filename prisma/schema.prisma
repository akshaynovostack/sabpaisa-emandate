generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model merchant {
  id              Int               @id @unique @default(autoincrement())
  merchant_id     String?           @unique
  name            String?
  token           String?
  merchant_code   String?           @unique
  address         String?
  status          Int?              @db.TinyInt
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  merchant_slabs  merchant_slab[]   @relation("merchant_to_slab")
  transactions    transaction[]     @relation("merchant_to_transaction")
}

enum Frequency {
  ADHO // Adhoc
  DAIL // Daily
  WEEK // Weekly
  MNTH // Monthly
  QURT // Quarterly
  MIAN // Half-yearly
  YEAR // Yearly
  BIMN // Bi-Monthly
  OOFF // Sequence
  RCUR // Reoccurring
}

enum MandateCategory {
  U005 // Utility Bill payment mobile telephone broadband
  B001 // Bill Payment Credit card
  A001 // API mandate
  D001 // Destination Bank Mandate
  I002 // Insurance other payment
  L002 // Loan amount security
  E001 // Education fees
  I001 // Insurance Premium
  L001 // Loan instalment payment
  M001 // Mutual Fund Payment
  F001 // Utility Bill payment Gas Supply Cos Fees
  U099 // Others
  T002 // TReDS
  T001 // Tax Payment
  U001 // Utility Bill Payment Electricity
  U003 // Corporate
  U006 // Utility Bill payment water
}

model merchant_slab {
  id               Int              @id @unique @default(autoincrement())
  merchant_id      String?
  slab_from        Decimal?
  slab_to          Decimal?
  base_amount      Decimal?
  emi_amount       Decimal?
  emi_tenure       Int?             // Total number of installments
  frequency        Frequency?       // Frequency of the installments (e.g., MNTH for Monthly)
  duration         Int?             // Number of periods (e.g., 10 for 10 months)
  processing_fee   Decimal?
  effective_date   DateTime?
  expiry_date      DateTime?
  remarks          String?
  status           Int?             @db.TinyInt
  mandate_category MandateCategory? // Constrained to the MandateCategory enum
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  merchant         merchant?        @relation(fields: [merchant_id], references: [merchant_id], name: "merchant_to_slab")
}

model user {
  id             Int               @id @unique @default(autoincrement())
  user_id        String?            @unique
  name           String?
  mobile         String?
  email          String?
  pan            String?
  telephone      String?
  created_at     DateTime          @default(now())
  updated_at     DateTime          @updatedAt
  transactions   transaction[]     @relation("user_to_transaction")
  user_mandates  user_mandate[]    @relation("user_to_mandate")
}

model transaction {
  id              Int               @id @unique @default(autoincrement())
  transaction_id  String?           @unique // Use this as the unique identifier
  user_id         String?
  merchant_id     String?
  monthly_emi     Decimal?
  start_date      DateTime?
  end_date        DateTime?
  purpose         String?
  max_amount      Decimal?
  amount          Decimal           // Transaction amount
  sabpaisa_txn_id String?   // Use snake_case for the SabPaisa transaction ID
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  user            user?             @relation(fields: [user_id], references: [user_id], name: "user_to_transaction")
  merchant        merchant?         @relation(fields: [merchant_id], references: [merchant_id], name: "merchant_to_transaction")
  user_mandates   user_mandate[]    @relation("transaction_to_mandate")
}

model user_mandate {
  id                  Int      @id @unique @default(autoincrement())
  transaction_id      String?
  user_id             String?
  amount              Decimal?
  due_date            DateTime?
  paid_date           DateTime?
  bank_account_number String?  // Add this field
  bank_account_type   String?  // Add this field
  bank_name           String?  // Add this field
  bank_ifsc           String?  // Add this field
  frequency           String?
  registration_status String?
  bank_status_message String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  transaction         transaction? @relation(fields: [transaction_id], references: [transaction_id], name: "transaction_to_mandate")
  user                user?        @relation(fields: [user_id], references: [user_id], name: "user_to_mandate")
}
